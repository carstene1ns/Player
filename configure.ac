#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.69])
AC_INIT([easyrpg-player],[0.4.1],[https://github.com/EasyRPG/Player/issues],
	[easyrpg-player],[https://easy-rpg.org/])

AC_CONFIG_AUX_DIR([builds/autoconf])
AM_INIT_AUTOMAKE([1.11.4 foreign subdir-objects tar-ustar -Wall -Werror])
AM_MAINTAINER_MODE([enable])
AM_SILENT_RULES([yes])

AC_CONFIG_MACRO_DIR([builds/autoconf/m4])
AC_CONFIG_SRCDIR([src/main.cpp])
AC_CONFIG_HEADERS([config.h])

# Checks for programs.
AM_PROG_AR
AC_PROG_CXX
LT_INIT([disable-shared])

# Options.
AC_ARG_VAR([EM_GAME_URL], [Game URL/directory (only used for the Emscripten port)])
AS_IF([test "x$EM_GAME_URL" != "x"],[
	AC_DEFINE_UNQUOTED([EM_GAME_URL], ["$EM_GAME_URL"], [Game URL (Emscripten)])
])
AC_ARG_ENABLE([fmmidi],
	AS_HELP_STRING([--enable-fmmidi@<:@=fallback@:>@],
		[use internal MIDI sequencer/as fallback @<:@default=no@:>@]))
AS_IF([test "x$enable_fmmidi" = "xyes"],[want_fmmidi=1],
	[test "x$enable_fmmidi" = "xfallback"],[want_fmmidi=2])
AS_IF([test "x$want_fmmidi" != "x"],
	AC_DEFINE_UNQUOTED([WANT_FMMIDI],[$want_fmmidi],
		[Enable internal MIDI sequencer(1)/as fallback(2)]))
AM_CONDITIONAL([WANT_FMMIDI],[test "x$want_fmmidi" != "x"])

# Checks for libraries.
PKG_CHECK_MODULES([LCF],[liblcf])
PKG_CHECK_MODULES([PIXMAN],[pixman-1])
AC_ARG_WITH([freetype],AS_HELP_STRING([--without-freetype],
	[Disable FreeType font rendering @<:@default=auto@:>@]))
AS_IF([test "x$with_freetype" != "xno"], [
	PKG_CHECK_MODULES([FREETYPE],[freetype2],[
		AC_DEFINE(HAVE_FREETYPE,[1],[Enable FreeType font rendering])
		auto_freetype=1
	],[auto_freetype=0])
	AC_ARG_WITH([harfbuzz],AS_HELP_STRING([--without-harfbuzz],
		[Disable HarfBuzz text shaping @<:@default=auto@:>@]))
	AS_IF([test "x$with_harfbuzz" != "xno"], [
		PKG_CHECK_MODULES([HARFBUZZ],[harfbuzz],[
			AC_DEFINE(HAVE_HARFBUZZ,[1],[Enable HarfBuzz text shaping])
			auto_harfbuzz=1
		],[auto_harfbuzz=0])
	])
])
AM_CONDITIONAL([HAVE_FREETYPE],[test "x$auto_freetype" = "x1"])
AM_CONDITIONAL([HAVE_HARFBUZZ],[test "x$auto_harfbuzz" = "x1"])
PKG_CHECK_MODULES([SDL],[sdl2],[AC_DEFINE(USE_SDL,[1],[Enable SDL2])],[
	PKG_CHECK_MODULES([SDL],[sdl],[AC_DEFINE(USE_SDL,[1],[Enable SDL])])
])
PKG_CHECK_MODULES([SDLMIXER],[SDL2_mixer],[AC_DEFINE(HAVE_SDL_MIXER,[1],[Enable SDL2_Mixer])],[
	PKG_CHECK_MODULES([SDLMIXER],[SDL_mixer],[AC_DEFINE(HAVE_SDL_MIXER,[1],[Enable SDL_Mixer])])
])
PKG_CHECK_MODULES([PNG],[libpng])
PKG_CHECK_MODULES([ZLIB],[zlib])
AC_ARG_WITH([libmpg123],[AS_HELP_STRING([--without-libmpg123],
	[Disable improved MP3 support provided by libmpg123. Uses SDL_mixer instead which results
	in noise or crashes for some MP3s. @<:@default=auto@:>@])])
AS_IF([test "x$with_libmpg123" != "xno"],[
	PKG_CHECK_MODULES([MPG123],[libmpg123],[
		AC_DEFINE(HAVE_MPG123,[1],[Disable improved MP3 support provided by libmpg123])
		auto_mpg123=1
	],[auto_mpg123=0])
])
AM_CONDITIONAL([HAVE_MPG123],[test "x$auto_mpg123" = "x1"])
# wildmidi has no pkg-config support (yet), this aims to make the same features available
AC_ARG_VAR([WILDMIDI_CFLAGS], [C compiler flags for WILDMIDI])
AC_ARG_VAR([WILDMIDI_LIBS], [linker flags for WILDMIDI])
AC_ARG_WITH([libwildmidi],[AS_HELP_STRING([--with-libwildmidi],
	[Enable Midi support provided by libwildmidi. @<:@default=no@:>@])])
AS_IF([test "x$with_libwildmidi" = "xyes"],[
	AS_IF([test -z "$WILDMIDI_CFLAGS" -a -z "$WILDMIDI_LIBS"],[
		AC_CHECK_LIB([WildMidi],[WildMidi_Init],[
			AC_DEFINE(HAVE_WILDMIDI,[1],[Enable Midi support provided by libwildmidi])
			WILDMIDI_LIBS=[-lWildMidi]
			auto_wildmidi=1
		],[auto_wildmidi=0])
	],[
		AC_MSG_CHECKING([for WILDMIDI])
		AC_MSG_RESULT([assuming yes])
		AC_DEFINE(HAVE_WILDMIDI,[1],[Enable Midi support provided by libwildmidi])
		auto_wildmidi=1
	])
])
AM_CONDITIONAL([HAVE_WILDMIDI],[test "x$auto_wildmidi" = "x1"])
AC_ARG_WITH([oggvorbis],[AS_HELP_STRING([--without-oggvorbis],
	[Disable Ogg Vorbis support @<:@default=auto@:>@])])
AS_IF([test "x$with_oggvorbis" != "xno"],[
	PKG_CHECK_MODULES([OGGVORBIS],[vorbisfile],[
		AC_DEFINE(HAVE_OGGVORBIS,[1],[Enable Ogg Vorbis support])
		auto_oggvorbis=1
	],[auto_oggvorbis=0])
])
AM_CONDITIONAL([HAVE_OGGVORBIS],[test "x$auto_oggvorbis" = "x1"])
AC_ARG_WITH([libsndfile],[AS_HELP_STRING([--without-libsndfile],
	[Disable improved WAV support provided by libsndfile. @<:@default=auto@:>@])])
AS_IF([test "x$with_libsndfile" != "xno"],[
	PKG_CHECK_MODULES([SNDFILE],[sndfile],[
		AC_DEFINE(HAVE_LIBSNDFILE,[1],[Disable improved WAV support provided by libsndfile])
		auto_sndfile=1
	],[auto_sndfile=0])
])
AM_CONDITIONAL([HAVE_LIBSNDFILE],[test "x$auto_sndfile" = "x1"])
AC_ARG_WITH([libxmp],[AS_HELP_STRING([--without-libxmp],
	[Disable tracker module support provided by libxmp. @<:@default=auto@:>@])])
AS_IF([test "x$with_libxmp" != "xno"],[
	PKG_CHECK_MODULES([XMP],[libxmp],[AC_DEFINE(HAVE_XMP,[1],[Enable tracker module support provided by libxmp])],[auto_xmp=0])
])
AC_ARG_WITH([libspeexdsp],[AS_HELP_STRING([--without-libspeexdsp],
	[Disable resampling support provided by libspeexdsp. Uses SDL_mixer instead
	which results in noise. @<:@default=auto@:>@])])
AS_IF([test "x$with_libspeexdsp" != "xno"],[
	PKG_CHECK_MODULES([SPEEXDSP],[speexdsp],[
		AC_DEFINE(HAVE_LIBSPEEXDSP,[1],[Disable resampling support provided by libspeexdsp])
		auto_speexdsp=1
	],[auto_speexdsp=0])
])
AM_CONDITIONAL([HAVE_LIBSPEEXDSP],[test "x$auto_speexdsp" = "x1"])

# Checks for header files.
AC_CHECK_HEADERS([stdint.h stdlib.h string.h unistd.h wchar.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_CHECK_HEADER_STDBOOL
AC_C_INLINE
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT8_T
AC_TYPE_SIZE_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT8_T

# Checks for library functions.
AC_FUNC_ERROR_AT_LINE
AC_CHECK_FUNCS([malloc floor getcwd memset putenv strerror])

# Manual page.
AC_CHECK_PROGS([A2X], [a2x a2x.py], [no])
AM_CONDITIONAL([HAVE_A2X], [test x"$A2X" != "xno"])
AC_SUBST([A2X])
AS_IF([test x"$A2X" = "xno" && test ! -f "${srcdir}/resources/easyrpg-player.6"],
  AC_MSG_WARN([a2x is required to create the manual page]))
AM_CONDITIONAL([HAVE_MANUAL], [test -f "${srcdir}/resources/easyrpg-player.6"])

# bash completion
PKG_CHECK_VAR([bashcompinstdir],[bash-completion],[completionsdir])
AM_CONDITIONAL([HAVE_BASHCOMP], [test "x$bashcompinstdir" != "x"])
AC_SUBST(bashcompinstdir)

# Doxygen source documentation.
m4_include([builds/autoconf/m4/ax_prog_doxygen.m4])
DX_DOXYGEN_FEATURE(OFF)
DX_HTML_FEATURE(ON)
DX_DOT_FEATURE(ON)
DX_INIT_DOXYGEN(easyrpg-player, resources/Doxyfile, doc)

AC_CONFIG_FILES([Makefile
                 resources/Doxyfile])

AC_OUTPUT

# Print configuration summary
if test "x$silent" != "xyes"; then

# Helper function
AC_DEFUN([OPTLIB_STATUS],[
	AS_IF([test "x$1" = "x1"], [echo "enabled"], [test "x$1" = "x0"], [echo "not found"], [echo "disabled"])
])

echo
echo "Configuration Summary"
echo "====================="

echo
echo "Optional Features"
echo "-----------------"
echo -n "MP3 decoding using libmpg123:       "
OPTLIB_STATUS($auto_mpg123)
AS_IF([test "x$auto_mpg123" != "x1"],[
	echo " => This will fallback to SDL_mixer's MP3 support, which may sometimes"
	echo "    result in noise or silence."
])
echo -n "OGG decoding using libvorbisfile:   "
OPTLIB_STATUS($auto_oggvorbis)
echo -n "MIDI decoding using libwildmidi:    "
OPTLIB_STATUS($auto_wildmidi)
echo -n "WAV decoding using libsndfile:      "
OPTLIB_STATUS($auto_sndfile)
echo -n "Music resampling using libspeexdsp: "
OPTLIB_STATUS($auto_speexdsp)
AS_IF([test "x$auto_speexdsp" != "x1"],[
	echo " => This will disable all pitch changes in Music and Sound effects,"
	echo "    also "
])

fi
